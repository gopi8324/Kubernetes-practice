# Create a new user called john. Grant him access to the cluster. 
# John should have permission to create, list, get, update and delete pods in the development namespace . 
# The private key exists in the location: /root/CKA/john.key and csr at /root/CKA/john.csr.
# Important Note: As of kubernetes 1.19, the CertificateSigningRequest object expects a signerName.
# Please refer the documentation to see an example. The documentation tab is available at the top right of terminal.
# CSR: john-developer Status:Approved
# Role Name: developer, namespace: development, Resource: Pods
# Access: User 'john' has appropriate permissions


# Cluster role permission
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: developer
rules:
- resources: ["pods"]
  verbs: ["get", "create", "update", "list","delete"]

# user creation john
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: john-developer
  namespace: development
subjects:
- kind: User
  name: john
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: developer
  apiGroup: rbac.authorization.k8s.io

# auth:

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: john-developer
spec:
  signerName: kubernetes.io/kube-apiserver-client
  requests:  
  usages:
  - digital signature
  - key encipherment
  - client auth



# kube-apiserver --authorization-mode=...,RBAC --other-options --more-options
# kubectl create role developer --resource=pods --verb=create,list,get,update,delete --namespace=development
# kubectl create rolebinding developer-role-binding --role=developer --user=john --namespace=development
# kubectl auth can-i update pods --as=john --namespace=development